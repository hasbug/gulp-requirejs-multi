//mixin

//常用mixin

//1.带有优雅降级地使用rem单位
@function calculateRem($size:16) {
  $remSize:$size / 10px;
  @return $remSize * 1rem;
}

@mixin font-size($size){
  font-size:$size;
  font-size:calculateRem($size);
}

//2.清除浮动clearfix
@mixin clearfix(){
  &:before,
  &:after{
    content:"";
    display: table;
  }
  &:after{
    clear:both;
  }
}


//3.border-radius 圆角
@mixin radius($angle){
  -webkit-border-radius:$angle;
  -moz-border-radius:$angle;
  -ms-border-radius:$angle;
  border-radius:$angle;
}


//4.长阴影
//@function makelongshadow($color) {
//  $val:0px 0px $color;
//  @for $i form 1 through 200{
//    $val:#{$val},#{$i}px #{$i}px #{$i}px #{$color};
//  }
//  @return $val;
//}
//
//@mixin longshadow($color){
//  text-shadow: makelongshadow($color);
//}
/*
 *使用
 *h1{
 *  @include longshadow(darken($color,5%));
 *}
 */

//5.媒体查询断点
//先定义一系列断点
$breakpoints:(
        'xxs':'only screen and (min-width:320px)',
        'xsm':'only screen and (min-width:350px)',
        'xs':'only screen and (min-width:375px)',
        's':'only screen and (min-width:414px)',
        'sm':'only screen and (min-width:768px)',
        'md':'only screen and (min-width:992px)',
        'lg':'only screen and (min-width:1200px)',
) !default;

//定义对应mixin
@mixin respond-to($breakpoint){
  $query:map-get($breakpoints,$breakpoint);

  @if not $query {
    @error 'No value found for `#{$breakpoint}`.Please make sure it is defined in `$breakpoints` map.';
  }

  @media #{if(type-of($query)=='string',unquote($query),inspect($quyery))}{
    @content;
  }
}

/*
* 使用
*  .element{
*    color:#000;
*   @include respond-to(sm){
*      color:#333;
*    }
*  }
*
*/


//6.禁用样式 disable
@mixin disable($bgColor:#e6e6e6,$textColor:#ababab){
  color:$textColor !important;
  background-color:$bgColor !important;
  cursor: not-allowed !important;
}

//7.最小高度  min-height
@mixin min-height($height){
  min-height:$height;
  height:auto !important;
  @if legacy-support-for-ie{
    _height:$height;
  }
}


//8.father-inside 从内部增加父级，给当前元素定义某个父级下的样式
@mixin fater-inside($content){
  #{$content} &{
    @content;
  }
}

/*
 * 使用
 *  .ele{
 *      @include fater-inside('.box'){
 *        color:#333;
 *      }
 *    }
 *
 * 输出
 * .box .ele{
 *  color:#333;
 * }
 */

//9.三角效果
@mixin arrow($direction,$size,$color){
  //content:""  //使用伪元素的时候需要定义
  width:0;
  height:0;
  line-height:0;
  font-size:0;
  overflow: hidden;
  border-width: $size;
  @if $direction== top{
    border-style:dashed dashed solid dashed;
    border-color:transparent transparent $color transparent;
  }
  @else if $direction == bottom {
    border-style: solid dashed dashed dashed;
    border-color: $color transparent transparent transparent;
  }
  @else if $direction == right {
    border-style:dashed dashed dashed solid;
    border-color: transparent transparent transparent $color;
  }
  @else if $direction == left {
    border-style: dashed solid dashed dashed;
    border-color: transparent $color transparent transparent;
  }
}


//10.flex
@mixin flex(){
  display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
  display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
  display: -ms-flexbox;      /* TWEENER - IE 10 */
  display: -webkit-flex;     /* NEW - Chrome */
  display: flex;             /* NEW, Spec - Opera 12.1, Firefox 20+ */
}
@mixin flex_item($val:1){
  -webkit-box-flex: $val;      /* OLD - iOS 6-, Safari 3.1-6 */
  -moz-box-flex: $val;         /* OLD - Firefox 19- */
  width: 20%;               /* For old syntax, otherwise collapses. */
  -webkit-flex: $val;          /* Chrome */
  -ms-flex: $val;              /* IE 10 */
  flex: $val;

}